let umaStrind = 'Uma String!';
let outraString = "Outra String!";
let maisUmaString = `Mais uma String`;
let olocoMaisUmaString = "Vamos comer um MC Donald's!"
let olocoDenovoString = 'Vamos de Mc Donald\'s?';
let meuIrmaoChegadeString = `Bora logo comer esse Mc Donald's?`

console.log(`>>>>>> ${umaStrind} <<<<<<`);
console.log(`>>>>>> ${outraString} <<<<<<`);
console.log(`>>>>>> ${maisUmaString} <<<<<<`);
console.log(`>>>>>> ${olocoMaisUmaString} <<<<<<`);
console.log(`>>>>>> ${olocoDenovoString} <<<<<<`);
console.log(`>>>>>> ${meuIrmaoChegadeString} <<<<<<`);
console.log(`>>>>>>Com um espa√ßamento \t ${umaStrind} <<<<<<`);
console.log(`>>>>>>Com dois espa√ßamento \t\t ${umaStrind} <<<<<<`);
console.log(`>>>>>>Com um espa√ßamento \t ${umaStrind} <<<<<<`);
console.log(`>>>>>>Com um espa√ßamento + exibi√ß√£o de uma barra \\\t ${umaStrind} <<<<<<`);
console.log(`>>>>>>Com um espa√ßamento + exibi√ß√£o de duas barra \\\\ \t ${umaStrind} <<<<<<`);

/**
     * Al√©m da forma regular, de caracteres de impress√£o, caracteres especiais podem ser codificados usando a escape notation (nota√ß√£o com barra invertida):

    C√≥digo	Saida
    \0	o caractere NULL
    \'	aspas simples
    \"	aspas duplas
    \\	barra invertida
    \n	nova linha
    \r	carriage return
    \v	tab vertical
    \t	tab
    \b	backspace
    \f	form feed
    \uXXXX	unicode codepoint
    \xXX	the Latin-1 character

 */

//--  STRINGS S√ÉO ITER√ÅVEIS -- //

console.log(umaStrind[0]);
console.log(umaStrind[1]);
console.log(umaStrind[2]);
console.log(umaStrind[3]);
console.log(umaStrind[4]);
console.log(umaStrind[5]);
console.log(umaStrind[6]);
console.log(umaStrind[7]);
console.log(umaStrind[8]);
console.log(umaStrind[9]);
console.log(umaStrind[10]);
console.log(umaStrind[11]); //-- Undefined --//
console.log(umaStrind[-1]); //-- Undefined --//

//-- FUN√á√ïES RAIZ DO JAVASCRIPT PARA STRING --//
// Existem N... fun√ß√µes para usar com strings no JS.

/*
    ====================================================================
    | LISTA DE M√âTODOS E PROPRIEDADES NATIVAS DE STRING EM JAVASCRIPT  |
    ====================================================================

    --- Acessando Caracteres e Valores ---

    charAt(index): Retorna o caractere no √≠ndice especificado.
        Ex: 'abc'.charAt(1) -> 'b'

    charCodeAt(index): Retorna o valor num√©rico Unicode (UTF-16) do caractere no √≠ndice especificado.
        Ex: 'abc'.charCodeAt(1) -> 98

    codePointAt(index): Retorna o valor Unicode completo do ponto de c√≥digo no √≠ndice especificado (√∫til para caracteres fora do BMP, como emojis).
        Ex: 'üòÑ'.codePointAt(0) -> 128516

    [index]: Acesso direto ao caractere no √≠ndice especificado (somente leitura).
        Ex: 'abc'[1] -> 'b'


    --- Busca e Verifica√ß√£o ---

    includes(searchString, position?): Verifica se a string cont√©m a 'searchString'. Retorna true ou false. O segundo argumento opcional define a posi√ß√£o inicial da busca.
        Ex: 'Ol√° mundo'.includes('mun') -> true

    startsWith(searchString, position?): Verifica se a string come√ßa com a 'searchString'. Retorna true ou false. O segundo argumento opcional define a posi√ß√£o inicial da verifica√ß√£o.
        Ex: 'Ol√° mundo'.startsWith('Ol√°') -> true

    endsWith(searchString, length?): Verifica se a string termina com a 'searchString'. Retorna true ou false. O segundo argumento opcional define o comprimento da string a ser considerada.
        Ex: 'Ol√° mundo'.endsWith('mundo') -> true

    indexOf(searchValue, fromIndex?): Retorna o √≠ndice da primeira ocorr√™ncia de 'searchValue'. Retorna -1 se n√£o encontrar.
        Ex: 'banana'.indexOf('na') -> 2

    lastIndexOf(searchValue, fromIndex?): Retorna o √≠ndice da √∫ltima ocorr√™ncia de 'searchValue'. Retorna -1 se n√£o encontrar.
        Ex: 'banana'.lastIndexOf('na') -> 4

    search(regexp): Procura por uma correspond√™ncia entre uma express√£o regular e a string. Retorna o √≠ndice da correspond√™ncia ou -1.
        Ex: 'Onde est√° Wally?'.search(/Wally/) -> 10


    --- Extra√ß√£o e Divis√£o ---

    slice(beginIndex, endIndex?): Extrai uma se√ß√£o da string e a retorna como uma nova string, sem modificar a original. √çndices podem ser negativos.
        Ex: 'Mozilla'.slice(1, 4) -> 'ozi'

    substring(indexStart, indexEnd?): Similar ao slice(), mas n√£o aceita √≠ndices negativos. Se indexStart > indexEnd, os valores s√£o trocados.
        Ex: 'Mozilla'.substring(1, 4) -> 'ozi'

    substr(start, length?): (Obsoleto, mas ainda funciona) Extrai uma parte da string a partir de um 'start' com um 'length' definido.
        Ex: 'Mozilla'.substr(1, 3) -> 'ozi'

    split(separator, limit?): Divide a string em um array de substrings, usando um 'separator' para determinar onde fazer as divis√µes.
        Ex: 'a-b-c'.split('-') -> ['a', 'b', 'c']


    --- Modifica√ß√£o e Cria√ß√£o de Novas Strings ---

    concat(string2, ...): Concatena uma ou mais strings √† string atual. O operador '+' √© geralmente preferido.
        Ex: 'Ol√°'.concat(' ', 'mundo') -> 'Ol√° mundo'

    repeat(count): Retorna uma nova string contendo o n√∫mero especificado de c√≥pias da string original.
        Ex: 'a'.repeat(3) -> 'aaa'

    replace(searchValue, newValue): Substitui a primeira ocorr√™ncia de 'searchValue' (pode ser string ou regex) por 'newValue'.
        Ex: 'Gato e gato'.replace('gato', 'cachorro') -> 'Gato e cachorro'

    replaceAll(searchValue, newValue): Substitui todas as ocorr√™ncias de 'searchValue' (pode ser string ou regex com flag 'g') por 'newValue'.
        Ex: 'gato e gato'.replaceAll('gato', 'cachorro') -> 'cachorro e cachorro'

    toLowerCase(): Converte a string inteira para letras min√∫sculas.
        Ex: 'TEXTO'.toLowerCase() -> 'texto'

    toUpperCase(): Converte a string inteira para letras mai√∫sculas.
        Ex: 'texto'.toUpperCase() -> 'TEXTO'

    trim(): Remove espa√ßos em branco do in√≠cio e do fim da string.
        Ex: '  ol√°  '.trim() -> 'ol√°'

    trimStart() / trimLeft(): Remove espa√ßos em branco apenas do in√≠cio da string.
        Ex: '  ol√°  '.trimStart() -> 'ol√°  '

    trimEnd() / trimRight(): Remove espa√ßos em branco apenas do fim da string.
        Ex: '  ol√°  '.trimEnd() -> '  ol√°'

    padStart(targetLength, padString?): Preenche o in√≠cio da string com outra string ('padString') at√© que a string resultante atinja o 'targetLength'.
        Ex: '5'.padStart(3, '0') -> '005'

    padEnd(targetLength, padString?): Preenche o final da string com outra string ('padString') at√© que a string resultante atinja o 'targetLength'.
        Ex: '5'.padEnd(3, '0') -> '500'


    --- M√©todos Relacionados a Express√µes Regulares ---

    match(regexp): Retorna um array com os resultados da correspond√™ncia entre a string e uma express√£o regular. Retorna null se n√£o houver correspond√™ncia.
        Ex: 'A1 B2 C3'.match(/\d/g) -> ['1', '2', '3']

    matchAll(regexp): Retorna um iterador de todos os resultados de correspond√™ncia de uma express√£o regular (com a flag 'g' obrigat√≥ria).
        Ex: const matches = 'A1 B2'.matchAll(/\w(\d)/g); -> Iterador com [['A1', '1'], ['B2', '2']]


    --- Outros M√©todos ---

    normalize(form?): Retorna a Forma de Normaliza√ß√£o Unicode da string (NFC, NFD, NFKC, NFKD). √ötil para comparar strings com acentos.
        Ex: '\u006E\u0303'.normalize() -> '√±'

    localeCompare(compareString, locales?, options?): Compara duas strings levando em conta a localidade (ordena√ß√£o alfab√©tica correta, acentos, etc.).
        Ex: '√©'.localeCompare('f') -> -1 (vem antes)

    toString(): Retorna o valor primitivo do objeto String.
        Ex: new String('abc').toString() -> 'abc'

    valueOf(): Retorna o valor primitivo do objeto String (geralmente chamado internamente).
        Ex: new String('abc').valueOf() -> 'abc'


    --- Propriedades ---

    length: Retorna o n√∫mero de unidades de c√≥digo (caracteres) na string.
        Ex: 'Ol√°'.length -> 3

*/

console.log("----------------");
console.log(umaStrind);
console.log(umaStrind.length);
console.log(umaStrind.charAt(8));
console.log(umaStrind[8]);

console.log(umaStrind.charCodeAt(8));
console.log(umaStrind.codePointAt(8));

console.log(umaStrind.indexOf('String'));
console.log(umaStrind.indexOf('string')); //-- Case Sensitive --//
console.log(umaStrind.includes('String'));
console.log(umaStrind.includes('string')); //-- Case Sensitive --//

console.log(umaStrind.startsWith('Uma'));
console.log(umaStrind.startsWith('uma')); //-- Case Sensitive --//

console.log(umaStrind.endsWith('!'));
console.log(umaStrind.endsWith('.'));

console.log(umaStrind.slice(4, 10));
console.log(umaStrind.slice(4));
console.log(umaStrind.slice(-6, -1));
console.log(umaStrind.slice(-6));

console.log(umaStrind.substring(4, 10));
console.log(umaStrind.substring(10, 4));
console.log(umaStrind.substring(4));
console.log(umaStrind.substring(-6, -1));

let oRato = "O rato roeu a roupa do rei de Roma.";
console.log(oRato);
console.log(oRato.replace('rato', 'gato'));
console.log(oRato.replaceAll('r', 'l'));
console.log(oRato.replace(/r/g, 'l')); //-- Usando Regex --//
console.log(oRato.toLowerCase());
console.log(oRato.toUpperCase());
console.log(oRato.trim());
let oRato2 = "        O rato roeu a roupa do rei de Roma.        ";
console.log(oRato2);
console.log(oRato2.trim());
console.log(oRato2.trimStart());
console.log(oRato2.trimEnd());

console.log(oRato.length);
console.log(oRato.padStart(55, '.'));
console.log(oRato.padEnd(150, '.'));

console.log(oRato.slice(2, 6));
console.log(oRato.slice(-6));
console.log(oRato.slice(-6, -2));
console.log(oRato.split('r'));
console.log(oRato.split(' '));
console.log(oRato.split(' ', 4 ));

console.log(oRato.match(/r/g));
console.log(oRato.match(/R/g));
console.log(oRato.match(/r/gi));

console.log(oRato.toLowerCase());
console.log(oRato.toUpperCase());

console.log(oRato.normalize());